---
title: "Day7"
format: html
editor: visual
---

```{r}
library(tidyverse)
library(palmerpenguins)
library(dplyr)

```

## Relational data

Def: Collections of data tables that are related to one another

How do we use them: Relational database management systems(RDBMS) are queries using SQL - database management systems

To combine(join) information from different tables for our anlyses

-   Mutating: add new variables to one data frame

-   Filtering: filter observation from one data frame from matching observations in the other table

Key: variable that stores unique information that can be used to connect information across data set (EX: ID, coordinates, etc.)

[**Full join: everything from both data frames is retained, regardless of whether or not it has a match in the data frame its being join to**]{.underline} **--- is the safest route because you could just filter in the end**

`{r} full_join(x,y, y = "z")}`

[**Left join table: Everything in X(left table). Things from Y(right table) that have a matching key in X are joined to it. Things in Y that do not have a matching key in X are dropped.**]{.underline} **EX(camp grounds available and camp grounds)**

`{r} left_join(x,y,by = "z")}`

[**Inner Join: Only keep stuff if they have a key match in X and Y**]{.underline}

`{r} inner_join(x,y, by = "z")}`

## Interactive Session

#### Data Wrangling refresher

Starting from penguins, write a single piped sequence in which you:

1.  Only include penguins at Dream and Biscoe Islands

2.  Remove the year and sex variables

3.  Add a new column body_max_kg with penguins mass converted from g to kg

4.  Rename the island variable to location

    ```{r}
    # penguins %>% filter(island == "Dream" | island == "Biscoe") write in a better way
    penguins %>% filter(island %in% c("Dream","Biscoe")) %>% 
      select(-year,-sex) %>% 
      mutate(body_mass_kg = body_mass_g/1000) %>% 
      rename(location = island)
      
    ```

<!-- -->

2.  Starting from penguins, write a single piped sequence to:

-   limit to adelie penguins

-   remove any observations where flipper_length_mm is NA(!is.na()) or drop_na

-   group the data by sex

-   create a summary table that contains the mean, sd, and sample size of flipper length for male and female Adelie penguins

```{r}
penguins %>% filter(species == "Adelie") %>% 
  drop_na(flipper_length_mm, sex) %>% 
  group_by(sex) %>% 
  summarize(mean_length = mean(flipper_length_mm),
            sd_length = sd(flipper_length_mm),
            sample_size =n())
```

The use of count

```{r}
### These two are equivelant
penguins %>% group_by(species, island, sex) %>% 
  summarize(sample_size = n())

# Count is just wrapping togetehr group_by + summarize +n() to get counts of observation. Use this when you just want to know how many there are and not really grouping
penguins %>% count(species,island,sex)
```

## Copying table text and import to R

1.  Copy table

2.  Add new R code chunk

3.  Addins: paste as data.frame

```{r}
animals <- data.frame(
  stringsAsFactors = FALSE,
          location = c("lagoon", "bluff", "creek", "oaks", "bluff"),
           species = c("bobcat", "coyote", "fox", "squirrel", "bobcat"),
          maturity = c("adult", "juvenile", "adult", "juvenile", "adult")
)
```

```{r}
sites <- data.frame(
  stringsAsFactors = FALSE,
          location = c("beach", "lagoon", "bluff", "oaks"),
    full_site_name = c("Goleta Beach","UCSB Lagoon",
                       "Ellwood Mesa","Fremont Campground"),
      jurisdiction = c("SB City", "UCSB", "SB City", "USFS")
)
```

#### Joins

Full join

```{r}
#X = left table, Y = right table
full_join_example <- full_join(animals,sites)

# left_join will only keep what is present in the left table
left_join_example <- left_join(animals,sites)

# inner_join() this will return what is present in both based on the key only
# observations where there is a matching variable 

inner_join_example <- inner_join(animals,sites)

## for multiple keys you can include in the join function (by = join_by(location)) in this case location
```

### Data Wrangling continued dates & times, string wrangling

ISO 8601: standard for representing dates and times

YYYY-MM-DD order 2018-03-07

If you have more

TZD(time zone designator: indicate how far ahead/behind a time zone UTC)

Thh: 2 digit hour (00 through 23)

Full date + hours + minutes + seconds: YYYY-MM-DDThh:mmssTZD

EX: 9:07am on June 8th, 2016 in Perth, Australia (UTC +8)

2016-06-08T09999:07+08:00

Example: February 18, 1996 at 8:34pm PST

1996-02-1888T08:34-07:00

Example: 12/5/2002 at 2:41am

2002-12-05T02:41-07:00

### Lubridate package

Part of the tidyverse help with dates and time - makes it easier to work with dates

Helps with parsing date-time data quickly and mostly painlessly

Classes of date-time data:

Date: Calender dates. ymd/dmy/mdy

POSIXct: date-time that also includes time zone information. The default is UTC

### Wrangling strings

stringr package: makes working with strings as easy as possible

Easier ways to do things like:

-   Detecting string patterns

-   Replacing string patterns

```{r}
# is the pattern detected?(TRUE/FALSE)
str_detect()
# Replace a string pattern with something else
str_replace()
```

## Date Times with lubridate()

ymd: If the date is year-month-day

mdy: month-day-year

dmy: day-month-year

```{r}
#month day year
my_date_1 <-lubridate::mdy("03-15-1998")
class(my_date_1)

#same other elements seperated with a slash
my_day_2 <-lubridate::mdy("11/7/2023")
my_day_2

# character representation
my_day_3 <- lubridate::dmy("08-Jun-1974")
my_day_3

#ymd
mydate_4 <- lubridate::ymd(19740723)
mydate_4

#Can we break the lubridate function
my_date_5 <- lubridate::mdy("06-20-2001")
my_date_5
```

### Adding times to our dates

```{r}
time_1 <- lubridate::ymd_hm("2020-08-12 11:18")
time_1
```

### Parse June 2, 1982 at 4pm UTC (16:00) as a date in R.

```{r}
time_2 <- lubridate::mdy_h("June 2, 1984 4pm") 
time_2
```

Time zones

```{r}
with_tz(time_2,"America/New_York")

time_3 <- lubridate::mdy_hm("May 12, 1998 5:56pm")
with_tz(time_3,"America/New_York")

# what time is it at a certain time zone
now<- with_tz(Sys.time(),"Europe/Belgrade")
now
```

### Access different parts of date-times

```{r}
# class: "POSIXct" "POSIXt"
class(now)

##pull the day
lubridate::day(now)

## week
lubridate::week(now)

## hour
lubridate::hour(now)

## min
lubridate::minute(now)

## sec
lubridate::second(now)

## year
lubridate::year(now)
```

Data frame

```{r}
urchin_counts <- data.frame(
  date = c("Oct 12, 2004","Oct 18, 2007", "Feb 12, 2003","Feb 14, 2008"),
  species = c("purple","red","red","white"),
  size_mm = c(19,24,18,11)
)

```

```{r}
urchin_mean_by_month <- urchin_counts %>% 
  mutate(date = lubridate::mdy(date)) %>% 
    # Add a new column month that only contains the month number from date
  mutate(month = lubridate::month(date)) %>% 
  group_by(month) %>% 
  summarize(mean_size = mean(size_mm))
```

## Strings with stringr 

#### Use str_detect to detect a string patter

```{r}
my_string <- "Charmy loves to nap and soft things and tuna"

str_detect(my_string, pattern = "tuna")

str_detect(my_string,pattern = "hot weather")

# String detect in a vector element by element - is case sensitive
my_string_2 <- c("burrito","fish taco","TACO salad","pie")

str_detect(my_string_2,"taco")
```

####  Working with starwars: filter by string detect

```{r}
starwars %>% 
  filter(str_detect(name, "Skywalker"))

## Add a columnn that replaces Sky with FIRE
starwars %>% 
  mutate(name_new = str_replace(name, pattern = "Sky", replacement = "FIRE"))
```

### White spaces

str_trim: to get rid of leading and trailing whitespace

str_squish to get rid of leading and trailing whitespace and excess interior white spaces

```{r}
my_string_3 <- "      Hi my name    is baby charmy!!!!      "
# Removes the white spaces but it still has excess spaces (one space)
str_trim(my_string_3)
# Further remove the spaces
str_squish(my_string_3)

# lower case
str_to_lower(my_string_3)

#upper case
str_to_upper(my_string_3)

#title
str_to_title(my_string_3)

#sentence
str_to_sentence(my_string_3)

## Example
starwars %>% 
  mutate(species_lower = str_to_lower(species))
```
